(type 5)
(quit)
(require '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl.node :as node])
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(type 5)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(quit)
(require '[cljs.repl.node :as node])
(quit)
(type 5)
(cemerick.piggieback/cljs-repl (cljs.repl.rhino/repl-env))
(type 5)
(def fs (js/require "fs"))
(def fs (require "fs"))
(require '[cljs.nodejs :as node])
(def fs (node/require "fs"))
node
(require '[cljs.nodejs :as nodejs])
(def fs (nodejs/require "fs"))
(def path (nodejs/require "path"))
(defn file-seq [dir]
  (tree-seq
    (fn [f] (.isDirectory (.statSync fs f) ()))
    (fn [d] (map #(.join path d %) (.readdirSync fs d)))
    dir))
(dorun (map println (mapcat file-seq "/home/george/Dropbox")))
(quit)
(cemerick.piggieback/cljs-repl (cljs.repl.rhino/repl-env))
(quit
(quit)
(cemerick.piggieback/cljs-repl (cljs.repl.node/repl-env))
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(type 5)
(repl/repl (node/repl-env))
(quit)
(type 5)
(quit
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(quit)
(require '[cljs.repl.node])
(quit)
(require '[cljs.repl.node :as node])
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(node/run-node-nrepl)
(quit)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
(quit)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
(cljs.repl.node/repl-env)
(type 5)
(cljs.repl/repl (cljs.repl.node/repl-env) :watch "src" :output-dir "out")
(quit)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(cemerick.piggieback/cljs-repl (node/repl-env))
:cljs/quit
(type 5)
(quit)
(type 5)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(cemerick.piggieback/cljs-repl (cljs.repl.node/replv-env))
(cemerick.piggieback/cljs-repl (cljs.repl.node/repl-env))
(require 'cljs.repl.node)
:cljs/quit
(require 'cljs.repl.node)
(cljs.repl.node/nrepl-env)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(require 'cljs.repl.node)
(cljs.repl.node/nrepl-env)
(quit)
(require 'cljs.repl.node)
(cljs.repl.node/nrepl-env)
(cljs.repl.node/run-node-nrepl)
require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(+ 2)
(type 2)
(quit)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
(cemerick.piggieback/wrap-cljs-repl)
(quit)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env))
(quit)
(require 'cljs.repl)
(require 'cljs.repl.node)
(cljs.repl/repl (cljs.repl.node/repl-env) :watch "src" :output-dir "out")
(quit)
(require '[cljs.repl.node :as node])
(println five)
(node/run-node-nrepl)
rlwrap -r -m -q '\"' -b "(){}[],^%3@\";:'" lein trampoline noderepl
(type 5)
(cljs.repl.node/repl-env)
(type 5)
(cemerick.piggieback/cljs-repl (cljs.repl.node/repl-env))
(println five)
(println 5)
(println five)
(println tn.core/five)
(println 'tn.core/five)
(in-ns tn.core)
(ns tn.core (:require '[cljs.nodejs :as node]))
(println "5")
(log "hi")
(.log js/console "hi")
:cljs/quit
(def fs (node/require "fs"))
(def fs (js/require "fs"))
(node/run-node-nrepl)
(cemerick.piggieback/cljs-repl (cljs.repl.node/repl-env))
(def fs (js/require "fs"))
(.readFile fs "/home/george/Dropbox/briefcase/tonight.dec" "utf8" (fn [err data] (data)))
(.readFile fs "/home/george/Dropbox/briefcase/tonight.dec" "utf8" (fn [err data] (println data)))
(.readFile fs "/home/george/Dropbox/briefcase/tonight.dec" "utf8" (fn [err data] data))
(.readFile fs "/home/george/Dropbox/briefcase/tonight.dec" "utf8" (fn [err data] (identity data)))
(.readFile fs "/home/george/Dropbox/briefcase/tonight.dec" "utf8" (fn [err data] (def interop1 data)))
(println interop1)
(use 'tn.core)
(node/run-node-nrepl)
(.log js/console "Hi from cljs")
(println tn.core/five)
(require 'tn.core)
(in-ns 'tn.core)
(println five)
:cljs/quit
(quit)
(require '[cljs.repl.node :as node])
(node/run-node-nrepl)
:cljs/quit
(quit)
(require '[cljs.repl.node :as node])
(cljs.repl.node/repl-env)
echo hihi
(quit)
(require '[cljs.repl.node :as node])
(cljs.repl/repl (node/repl-env))
(quit)
(require '[cljs.repl.node :as node])
(let [c (chan)]
    (go (>! c "hello!"))
    (go (.log js/console (<! c))))
(in-ns qbcljs.core
  (:require [cljs.nodejs :as node])
            [cljs.core.async :refer [put! chan <!]])
(cljs.repl.node/repl-env)
(require '[cljs.repl :as repl] '[cljs.repl.node :as node])
(repl/repl (node/repl-env)) ;necessary?
(quit)
(cljs.repl/repl 
  (cljs.repl.node/repl-env)
  :watch "src"
  :output-dir "out"
  :repl-requires '[[cljs.nodejs :as node]
                   [cljs.core.async :refer [put! chan <! >!] :refer-macros [go]]
                  ;[qbcljs.core]
                  ;default REPL loads:
                  [cljs.repl :refer-macros [source doc find-doc apropos dir pst]] 
                  [cljs.pprint 
                    :refer [pprint] 
                    :refer-macros [pp]]]) 
(require '[cljs.repl])
(require '[cljs.repl.node])
(cljs.repl/repl 
  (cljs.repl.node/repl-env)
  :watch "src"
  :output-dir "out"
  :repl-requires '[[cljs.nodejs :as node]
                   [cljs.core.async :refer [put! chan <! >!] :refer-macros [go]]
                  ;[qbcljs.core]
                  ;default REPL loads:
                  [cljs.repl :refer-macros [source doc find-doc apropos dir pst]] 
                  [cljs.pprint 
                    :refer [pprint] 
                    :refer-macros [pp]]]) 
(quit)
(load-file repl.clj)
(load-file "repl.clj")
(load-file "/home/george/Dropbox/qbcljs/repl.clj")
(load-file /home/george/Dropbox/qbcljs/repl.clj)
(quit)
(go)
go
as
(require '[cljs.nodejs :as node] [cljs.core.async :refer [put! chan <! >!]])
(require '[cljs.nodejs :as node])
(load repl)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(ns qbcljs.core
  (:require [cljs.nodejs :as node]
            [cljs.core.async :refer [put! chan <! >!]])
  (:require-macros [cljs.core.async.macros :refer [go]]
                   [cljs-asynchronize.macros :as dm :refer [asynchronize]]))
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(doc file-seq)
(quit)
(load-file "repl.clj")
(nil? true)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(-> 1 2 3 4)
(-> '1 '2 '3 '4)
(-> '1 '2 '3)
(-> 'one 'vector 'chan)
(second 1 2)
(second [1 2])
(first [1 2])
(second [1 2])
(defn -main [arg]
  (let [two (nth (.-argv node/process 2))
        three (nth (.-argv node/process 3))]
        ;v (-> path path->vector-of-dec-strings)
        ;      mf (comp string->yaml-object-chan file-path->string-with-contents)
        ;      one (mapv mf v)]
    ;(-> one
        ;vector-with-channels->channel-with-array
        ;chan-array-of-objects-yaml->table)
    (println two)
    (println three)
    ;#_(chan-array-of-objects-yaml->table (vector-with-channels->channel-with-array one) arg3)
    ;(println arg2)
    ;(chan-array-of-objects-yaml->table vector-with-channels->channel-with-array one)
   )
)
(load-file "repl.clj")
(clojure.string/blank? "")
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(quit)
(load-file "repl.clj")
(count '(5 6))
(defn string->num-yaml-docs [s]
  (min
  #_(.match s /^---$/gm) ; javascript implentation
  #_(.match s /^...$/gm) ; 
  (count (re-seq #"^---\n" s))
  (count (re-seq #"\n...$" s))))
)
(count (re-seq #"^---\n" "---"))
(count (re-seq #"^---\n" "---\n"))
(defn string->num-yaml-docs [s]
  (min
   (count (re-seq #"^---\n" s))
   (count (re-seq #"\n...$" s))))
(string->num-yaml-docs "---\nfag: fuck\n...")
(if (= 5 5) "expert at clojure")
(if (= 5 6) "expert at clojure")
(load-file "repl.clj")
(is (= 5 (+ 2 2)))
(load-file "repl.clj")
(/ 15 670)
