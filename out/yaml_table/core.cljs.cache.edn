;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name yaml-table.core, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async, put! cljs.core.async, take! cljs.core.async}, :defs {file-path->string-with-contents {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 8, :column 7, :end-line 8, :end-column 38, :arglists (quote ([path]))}, :name yaml-table.core/file-path->string-with-contents, :variadic false, :file "src/yaml_table/core.cljs", :end-column 38, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, string->yaml-object-chan {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 13, :column 7, :end-line 13, :end-column 31, :arglists (quote ([string]))}, :name yaml-table.core/string->yaml-object-chan, :variadic false, :file "src/yaml_table/core.cljs", :end-column 31, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, fill-vector-from-chan {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 28, :column 7, :end-line 28, :end-column 28, :arglists (quote ([c]))}, :name yaml-table.core/fill-vector-from-chan, :variadic false, :file "src/yaml_table/core.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, not-nil? {:name yaml-table.core/not-nil?, :file "src/yaml_table/core.cljs", :line 31, :column 1, :end-line 31, :end-column 14, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 31, :column 6, :end-line 31, :end-column 14}}, vector-with-channels->channel-with-array {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 33, :column 7, :end-line 33, :end-column 47, :arglists (quote ([vwc]))}, :name yaml-table.core/vector-with-channels->channel-with-array, :variadic false, :file "src/yaml_table/core.cljs", :end-column 47, :method-params ([vwc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vwc]))}, chan-array-of-objects-yaml->table {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 43, :column 7, :end-line 43, :end-column 40, :arglists (quote ([oc arg2]))}, :name yaml-table.core/chan-array-of-objects-yaml->table, :variadic false, :file "src/yaml_table/core.cljs", :end-column 40, :method-params ([oc arg2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([oc arg2]))}, path->chan-vec-dec-strings {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 48, :column 7, :end-line 48, :end-column 33, :arglists (quote ([input-path]))}, :name yaml-table.core/path->chan-vec-dec-strings, :variadic false, :file "src/yaml_table/core.cljs", :end-column 33, :method-params ([input-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-path]))}, -main {:protocol-inline nil, :meta {:file "/home/george/Dropbox/yaml-table/src/yaml_table/core.cljs", :line 55, :column 7, :end-line 55, :end-column 12, :arglists (quote ([& heh])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(heh)], :arglists ([& heh]), :arglists-meta (nil)}}, :name yaml-table.core/-main, :variadic true, :file "src/yaml_table/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(heh)], :arglists ([& heh]), :arglists-meta (nil)}, :method-params [(heh)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists ([& heh])}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}